// Terminal library | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// This module provides ANSI terminal rendering of a text-based scene graph. Unlike curses/ncurses, it doesn't provide much in the way of window borders or other UI framing; it just gives you a
// way to manage a layered display of information with various text attributes. Perhaps counterintuitively, it uses a subclass of Caterwaul syntax trees to implement this scene graph data
// structure. It also maintains an in-memory representation of the screen state and uses this to optimize large updates.

// Here's an example application:

// | var term = caterwaul.terminal(80, 24);
//   var text = term.text('hello world', {position: [4, 4]});
//   text.click(function (e) {
//     text.text('i got clicked');
//   });

// Events.
// This library understands mouse escape sequences and can translate them into events that get propagated through the scene graph. The interface is similar to jQuery's DOM event interface: events
// are captured and then bubbled, and you can do things like stop an event's propagation. Available events are:

// | click:        fired when the user does a mouse-press followed by a mouse-release
//   dblclick:     fired when the user does two clicks in quick succession (400ms timeout) and in roughly the same location (3x2 character margin)
//   mousedown:    fired when the user presses a mouse button
//   mouseup:      fired when the user releases a mouse button

// Key events are also reported. These are partitioned into 'normal' and 'control' characters.

// Supported attributes.
// Most ANSI stuff is supported one way or another. Terminal colors are available as numeric codes with no support for 256-color xterm extensions (perhaps later if I find a compelling use case
// for it). This library takes care of all positioning-related stuff, though it's up to you to wrap text accordingly. This can be resolved by running some text through a box-trim filter, which
// will make sure that it resides within a given area.

// Overlays.
// You can construct overlays that do various things with content underneath. The simplest case is masking, which just covers stuff up. The other possibility is a transparent overlay, which
// applies some transformation to the content beneath it before overlaying its text.
// Generated by SDoc 
